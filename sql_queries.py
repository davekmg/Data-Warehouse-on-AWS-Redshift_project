import configparser


# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')

ROLE_ARN = config.get('IAM_ROLE','ARN')
LOG_DATA = config.get('S3','LOG_DATA')
SONG_DATA = config.get('S3','SONG_DATA')
LOG_JSONPATH = config.get('S3','LOG_JSONPATH')

# DROP TABLES

staging_events_table_drop = "DROP TABLE IF EXISTS staging_events"
staging_songs_table_drop = "DROP TABLE IF EXISTS staging_songs"

songplay_table_drop = "DROP TABLE IF EXISTS songplays CASCADE"
user_table_drop = "DROP TABLE IF EXISTS users CASCADE"
song_table_drop = "DROP TABLE IF EXISTS songs CASCADE"
artist_table_drop = "DROP TABLE IF EXISTS artists CASCADE"
time_table_drop = "DROP TABLE IF EXISTS time CASCADE"

# DROP VIEWS
artists_songs_view_drop = "DROP VIEW IF EXISTS artists_songs_v"

# CREATE TABLES

# Staging Tables
staging_events_table_create = (
    "CREATE TABLE staging_events ( \
        artist VARCHAR (500), \
        auth VARCHAR (30), \
        first_name VARCHAR (50), \
        gender VARCHAR (1), \
        item_in_session INT DISTKEY, \
        last_name VARCHAR (50), \
        length DOUBLE PRECISION, \
        level VARCHAR (30), \
        location VARCHAR (500), \
        method VARCHAR (10), \
        page VARCHAR (30), \
        registration DOUBLE PRECISION, \
        session_id INT, \
        song VARCHAR (255), \
        status INT, \
        ts DOUBLE PRECISION, \
        user_agent VARCHAR (200), \
        user_id INT \
    );"
)

staging_songs_table_create = (
    "CREATE TABLE staging_songs ( \
        song_id VARCHAR (30) DISTKEY, \
        num_songs INT, \
        title VARCHAR (500), \
        artist_name VARCHAR (500), \
        artist_latitude DOUBLE PRECISION, \
        year INT, \
        duration DOUBLE PRECISION, \
        artist_id VARCHAR (30), \
        artist_longitude DOUBLE PRECISION, \
        artist_location VARCHAR (500) \
    );"
)

# Dimension Tables
user_table_create = (
    "CREATE TABLE users ( \
        user_id int PRIMARY KEY SORTKEY, \
        first_name VARCHAR (50) NOT NULL, \
        last_name VARCHAR (50) NOT NULL, \
        gender VARCHAR (1) NOT NULL, \
        level VARCHAR (30) NOT NULL \
    )\
    DISTSTYLE ALL;"
)

# Note: The primary key and foreign key constraints are not enforced by Amazon Redshift. 
# However, they are used as planning hints. 
song_table_create = (
    "CREATE TABLE songs ( \
        song_id VARCHAR (30) PRIMARY KEY DISTKEY, \
        title VARCHAR (500) NOT NULL SORTKEY, \
        artist_id VARCHAR (30) NOT NULL, \
        year INT, \
        duration DOUBLE PRECISION \
    );"
)

artist_table_create = (
    "CREATE TABLE artists ( \
        artist_id VARCHAR (30) PRIMARY KEY, \
        name VARCHAR (500) NOT NULL SORTKEY, \
        location VARCHAR (500), \
        latitude DOUBLE PRECISION, \
        longitude DOUBLE PRECISION \
    )\
    DISTSTYLE ALL;"
)

# Note: Using DOUBLE PRECISION instead of TIMESTAMP because the data has millisecond timestamps 
time_table_create = (
    "CREATE TABLE time ( \
        start_time DOUBLE PRECISION PRIMARY KEY SORTKEY, \
        hour INT NOT NULL, \
        day INT NOT NULL, \
        week INT NOT NULL, \
        month INT NOT NULL, \
        year INT NOT NULL, \
        weekday INT NOT NULL \
    )\
    DISTSTYLE ALL;"
)

# Fact Table
# Note: The songplays and songs tables have been distributed using song_id. The song_id is
# a foreign key in the songplays table. This will emiliminate shuffling
songplay_table_create = (
    "CREATE TABLE songplays ( \
        songplay_id BIGINT GENERATED BY DEFAULT AS IDENTITY (0, 1) PRIMARY KEY, \
        start_time DOUBLE PRECISION NOT NULL, \
        user_id INT NOT NULL, \
        level VARCHAR (30) NOT NULL, \
        song_id VARCHAR (30) NOT NULL SORTKEY DISTKEY, \
        artist_id VARCHAR (30) NOT NULL, \
        session_id INT NOT NULL, \
        location VARCHAR (100), \
        user_agent VARCHAR (200), \
            CONSTRAINT fk_user_id FOREIGN KEY(user_id) \
                REFERENCES users(user_id), \
            CONSTRAINT fk_song_id FOREIGN KEY(song_id) \
                REFERENCES songs(song_id), \
            CONSTRAINT fk_artist_id FOREIGN KEY(artist_id) \
                REFERENCES artists(artist_id) \
    );"
)

# STAGING TABLES

staging_events_copy = ("""
    COPY staging_events FROM {}
    credentials 'aws_iam_role={}'
    region 'us-west-2'
    json {}
""").format(LOG_DATA, ROLE_ARN, LOG_JSONPATH)

staging_songs_copy = ("""
    COPY staging_songs FROM {}
    credentials 'aws_iam_role={}'
    region 'us-west-2'
    json 'auto'
""").format(SONG_DATA, ROLE_ARN)

# CREATE VIEWS

# This view will be used to assist in entering some data into the songplays table
artists_songs_view_create = ("""
    CREATE VIEW artists_songs_v AS
    SELECT sg.song_id, sg.artist_id, sg.title "song_title", ar.name "artist_name"
    FROM songs sg 
    JOIN artists ar ON sg.artist_id = ar.artist_id;
""")


# FINAL TABLES

# Note: songplay_id will be generated by the table using "IDENTITY"
songplay_table_insert = ("""
    INSERT INTO songplays (start_time, user_id, level, song_id, artist_id,  session_id, location, user_agent)
    SELECT start_time, user_id, level, song_id, artist_id,  session_id, location, user_agent
    FROM (
        SELECT se.ts "start_time", user_id, level, 
        (SELECT song_id FROM artists_songs_v WHERE song_title = se.song AND artist_name = se.artist LIMIT 1) "song_id", 
        (SELECT artist_id FROM artists_songs_v WHERE song_title = se.song AND artist_name = se.artist LIMIT 1) "artist_id", 
        session_id, location, user_agent
        FROM staging_events se
        WHERE page = 'NextSong'
        AND song IS NOT NULL
    ) TBL
    WHERE song_id IS NOT NULL
    AND artist_id IS NOT NULL;
""")

user_table_insert = ("""
    INSERT INTO users
    SELECT DISTINCT(user_id),first_Name, last_name, gender,
    (SELECT level FROM staging_events WHERE user_id = se.user_id ORDER BY ts DESC LIMIT 1) "level"
    FROM staging_events se
    WHERE page = 'NextSong'
    AND user_id IS NOT NULL;
""")

song_table_insert = ("""
    INSERT INTO songs
    SELECT DISTINCT (song_id), title, artist_id, year, duration 
    FROM staging_songs;
""")

artist_table_insert = ("""
    INSERT INTO artists
    SELECT DISTINCT(artist_id), artist_name, artist_location, artist_latitude, artist_longitude
    FROM staging_songs;
""")

time_table_insert = ("""
    INSERT INTO time
    SELECT start_time,
    EXTRACT(HOUR FROM date_time) "hour",
    EXTRACT(DAY FROM date_time) "day",
    EXTRACT(WEEK FROM date_time) "week",
    EXTRACT(MONTH FROM date_time) "month",
    EXTRACT(YEAR FROM date_time) "year",
    EXTRACT(DOW FROM date_time) "weekday"
    FROM (
        SELECT 
        DISTINCT (ts) "start_time",
        (SELECT timestamp 'epoch' + cast(ts AS BIGINT)/1000 * interval '1 second') "date_time" /*Redshift*/
        FROM staging_events
        WHERE page = 'NextSong'
    ) TBL;
""")


# QUERY LISTS

create_table_queries = [staging_events_table_create, staging_songs_table_create, user_table_create, song_table_create, artist_table_create, time_table_create, songplay_table_create]
create_view_queries = [artists_songs_view_create]
drop_table_queries = [staging_events_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop, staging_songs_table_drop]
drop_view_queries = [artists_songs_view_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [user_table_insert, song_table_insert, artist_table_insert, time_table_insert, songplay_table_insert]
